const FlowManager = require('../../../../FlowControl/FlowManager');
const { GetPedido } = require('../../../../Utiles/Funciones/P-acticoConcentracion/calcularOferta');

module.exports = async function cantidadYpago(userId, data, sock) {
    const flowData = FlowManager.userFlows[userId]?.flowData;
    const { productoDeseado } = flowData ?? {};

    console.log("üîç productoDeseado completo:");
    console.dir(productoDeseado, { depth: null, colors: true });

    // ‚úÖ Validaci√≥n de cantidad
    const cantidad = parseFloat(data);
    if (isNaN(cantidad) || cantidad <= 0) {
        await sock.sendMessage(userId, { text: "‚ùå Por favor, ingresa una *cantidad v√°lida de unidades*." });
        return;
    }

    // ‚úÖ Validaci√≥n de concentraci√≥n
    const valorConcentracion = parseFloat(productoDeseado.concentracion);
    if (isNaN(valorConcentracion)) {
        await sock.sendMessage(userId, {
            text: "‚ùå Ocurri√≥ un error al interpretar la concentraci√≥n seleccionada. Volv√© a elegir el producto."
        });
        return;
    }

    // ‚úÖ Verificar disponibilidad usando GetPedido
    const hayStock = await GetPedido(productoDeseado.Pactivo, valorConcentracion, cantidad);

    if (!hayStock) {
        await sock.sendMessage(userId, {
            text: "‚ùå No hay suficiente stock disponible para esa cantidad. Prob√° con un valor distinto."
        });
        return;
    }

    await sock.sendMessage(userId, {
        text: `‚úÖ Perfecto, tenemos disponibilidad para ${cantidad} unidad(es) del principio activo seleccionado.\n\nüõí ¬øQuieres pagar con otro agroqu√≠mico?\n\n1. S√≠\n2. No`
    });

    await FlowManager.setFlow(userId, "COMPRA", "eleccionMetodo", {
        cantdeseada: cantidad
    });
};
